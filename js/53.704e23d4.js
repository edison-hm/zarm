(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{700:function(n,e){n.exports="# Popup 弹出框\n\n\n\n## 基本用法\n```jsx\nimport { Popup, Cell, Button, Picker, Toast } from 'zarm';\n\nconst SINGLE_DATA = [\n  { value: '1', label: '选项一' },\n  { value: '2', label: '选项二' },\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      popBottom: false,\n      popTop: false,\n      popLeft: false,\n      popRight: false,\n      single: {\n        visible: false,\n        value: '',\n        dataSource: SINGLE_DATA,\n      },\n    };\n  }\n\n  open(key) {\n    this.setState({\n      [`${key}`]: true,\n    });\n  }\n\n  close(key) {\n    this.setState({\n      [`${key}`]: false,\n    });\n  }\n\n  toggle(key) {\n    const state = this.state[key];\n    state.visible = !state.visible;\n    this.setState({ [`${key}`]: state });\n  }\n\n  render() {\n    const { single } = this.state;\n    return (\n      <div>\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => {\n              this.open('popTop');\n              setTimeout(() => {\n                this.close('popTop');\n              }, 3000);\n            }}>开启</Button>\n          }\n        >\n          从上方弹出\n        </Cell>\n\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.open('popBottom')}>开启</Button>\n          }\n        >\n          从下方弹出\n        </Cell>\n\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.open('popLeft')}>开启</Button>\n          }\n        >\n          从左侧弹出\n        </Cell>\n\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.open('popRight')}>开启</Button>\n          }\n        >\n          从右侧弹出\n        </Cell>\n\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.open('popCenter')}>开启</Button>\n          }\n        >\n          从中间弹出\n        </Cell>\n\n        <Popup\n          visible={this.state.popTop}\n          direction=\"top\"\n          mask={false}\n          afterClose={() => { console.log('关闭'); }}\n        >\n          <div className=\"popup-box-top\">\n            更新成功\n          </div>\n        </Popup>\n\n        <Popup\n          visible={this.state.popBottom}\n          direction=\"bottom\"\n          onMaskClick={() => this.close('popBottom')}\n          afterOpen={() => console.log('打开')}\n          afterClose={() => console.log('关闭')}\n        >\n          <div className=\"popup-box\">\n            <Button size=\"xs\" onClick={() => { this.toggle('single'); }}>打开Picker</Button>\n          </div>\n        </Popup>\n\n        <Picker\n          visible={single.visible}\n          value={single.value}\n          dataSource={single.dataSource}\n          onOk={(selected) => {\n            console.log('Picker onOk: ', selected);\n            single.value = selected.map(item => item.value);\n            this.setState({ single });\n            Toast.show(JSON.stringify(selected));\n            this.toggle('single');\n          }}\n          onCancel={() => this.toggle('single')}\n        />\n\n        <Popup\n          visible={this.state.popLeft}\n          onMaskClick={() => this.close('popLeft')}\n          direction=\"left\"\n          afterClose={() => console.log('关闭')}\n        >\n          <div className=\"popup-box-left\">\n            <Button size=\"xs\" onClick={() => this.close('popLeft')}>关闭弹层</Button>\n          </div>\n        </Popup>\n\n        <Popup\n          visible={this.state.popRight}\n          onMaskClick={() => this.close('popRight')}\n          direction=\"right\"\n          afterClose={() => console.log('关闭')}\n        >\n          <div className=\"popup-box\">\n            <Button size=\"xs\" onClick={() => this.close('popRight')}>关闭弹层</Button>\n          </div>\n        </Popup>\n\n        <Popup\n          visible={this.state.popCenter}\n          onMaskClick={() => this.close('popCenter')}\n          direction=\"center\"\n          width=\"70%\"\n          afterClose={() => console.log('关闭')}\n        >\n          <div className=\"popup-box\">\n            <Button size=\"xs\" onClick={() => this.close('popCenter')}>关闭弹层</Button>\n          </div>\n        </Popup>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :--- |\n| visible | boolean | false | 是否显示 |\n| direction | string | 'bottom' | 弹出方向，可选值 `top`, `bottom`, `left`, `right`, `center` |\n| animationType | string | 'fade' | 动画效果，可选值 `fade`, `door`, `flip`, `rotate`, `zoom`,`moveUp`, `moveDown`, `moveLeft`, `moveRight`,`slideUp`, `slideDown`, `slideLeft`, `slideRight`，当direction等于“center”时生效 |\n| animationDuration | number | 200 | 动画执行时间（单位：毫秒） |\n| width | string &#124; number | - | 弹层宽度 |\n| mask | boolean | true | 是否展示遮罩层 |\n| maskType | string | 'normal' | 遮罩层的类型，可选值 `transparent`, `normal` |\n| afterOpen | () => void | - | 弹层展示后的回调 |\n| afterClose | () => void | - | 弹层关闭后的回调 |\n| onMaskClick | () => void | - | 点击遮罩层时触发的回调函数 |"}}]);